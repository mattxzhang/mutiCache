package com.dyy.yonxin.library2.cacheforandroid.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dyy.yonxin.library2.cacheforandroid.bean.CacheUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_USER".
*/
public class CacheUserDao extends AbstractDao<CacheUser, Void> {

    public static final String TABLENAME = "CACHE_USER";

    /**
     * Properties of entity CacheUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, int.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property SaveInDBTime = new Property(2, long.class, "saveInDBTime", false, "SAVE_IN_DBTIME");
        public final static Property JsonFriends = new Property(3, String.class, "jsonFriends", false, "JSON_FRIENDS");
    }


    public CacheUserDao(DaoConfig config) {
        super(config);
    }
    
    public CacheUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_USER\" (" + //
                "\"USER_ID\" INTEGER NOT NULL ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"SAVE_IN_DBTIME\" INTEGER NOT NULL ," + // 2: saveInDBTime
                "\"JSON_FRIENDS\" TEXT);"); // 3: jsonFriends
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getSaveInDBTime());
 
        String jsonFriends = entity.getJsonFriends();
        if (jsonFriends != null) {
            stmt.bindString(4, jsonFriends);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getSaveInDBTime());
 
        String jsonFriends = entity.getJsonFriends();
        if (jsonFriends != null) {
            stmt.bindString(4, jsonFriends);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CacheUser readEntity(Cursor cursor, int offset) {
        CacheUser entity = new CacheUser( //
            cursor.getInt(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getLong(offset + 2), // saveInDBTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // jsonFriends
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheUser entity, int offset) {
        entity.setUserId(cursor.getInt(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSaveInDBTime(cursor.getLong(offset + 2));
        entity.setJsonFriends(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CacheUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CacheUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(CacheUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
